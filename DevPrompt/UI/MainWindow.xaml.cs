using DevPrompt.Settings;
using DevPrompt.UI.ViewModels;
using DevPrompt.Utility;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Interop;

namespace DevPrompt.UI
{
    internal partial class MainWindow : Window
    {
        public MainWindowVM ViewModel { get; }
        public App App { get; }
        private bool systemShuttingDown;

        public MainWindow(App app, string initialErrorText)
        {
            this.App = app;
            this.ViewModel = new MainWindowVM(this)
            {
                ErrorText = initialErrorText
            };

            this.InitializeComponent();
        }

        public UIElement ViewElement
        {
            get => this.viewElementHolder.Child;
            set
            {
                if (this.viewElementHolder.Child != value)
                {
                    this.viewElementHolder.Child = value;
                    this.viewElementHolder.Visibility = (value != null) ? Visibility.Visible : Visibility.Collapsed;
                }
            }
        }

        private void OnFileMenuOpened(object sender, RoutedEventArgs args)
        {
            MainWindow.UpdateMenu((MenuItem)sender, this.App.Settings.Consoles, (ConsoleSettings settings) =>
            {
                return new MenuItem()
                {
                    Header = settings.MenuName,
                    Command = this.ViewModel.ConsoleCommand,
                    CommandParameter = settings,
                };
            });
        }

        private void OnGrabMenuOpened(object sender, RoutedEventArgs args)
        {
            Api.IApp app = this.App;
            List<Api.GrabProcess> grabProcesses = new List<Api.GrabProcess>(app.GrabProcesses);

            MainWindow.UpdateMenu((MenuItem)sender, grabProcesses, (Api.GrabProcess grabProcess) =>
            {
                return new MenuItem()
                {
                    Header = grabProcess.Name,
                    Command = this.ViewModel.GrabConsoleCommand,
                    CommandParameter = grabProcess.Id,
                };
            });
        }

        private async void OnVsMenuOpened(object sender, RoutedEventArgs args)
        {
            IEnumerable<VisualStudioSetup.Instance> instances = await VisualStudioSetup.GetInstances();

            MainWindow.UpdateMenu((MenuItem)sender, instances.ToArray(), (VisualStudioSetup.Instance instance) =>
            {
                return new MenuItem()
                {
                    Header = instance.DisplayName,
                    Command = this.ViewModel.VisualStudioCommand,
                    CommandParameter = instance,
                };
            });
        }

        private void OnToolsMenuOpened(object sender, RoutedEventArgs args)
        {
            MenuItem menu = (MenuItem)sender;

            MainWindow.UpdateMenu(menu, this.App.Settings.Tools, (ToolSettings settings) =>
            {
                if (string.IsNullOrEmpty(settings.Command))
                {
                    return new Separator();
                }

                return new MenuItem()
                {
                    Header = settings.Name,
                    Command = this.ViewModel.ToolCommand,
                    CommandParameter = settings,
                };
            });

            this.AddPluginMenuItems(menu, Api.MenuType.Tools);
        }

        private void OnLinksMenuOpened(object sender, RoutedEventArgs args)
        {
            MenuItem menu = (MenuItem)sender;

            MainWindow.UpdateMenu(menu, this.App.Settings.Links, (LinkSettings settings) =>
            {
                if (string.IsNullOrEmpty(settings.Address))
                {
                    return new Separator();
                }

                return new MenuItem()
                {
                    Header = settings.Name,
                    Command = this.ViewModel.LinkCommand,
                    CommandParameter = settings,
                };
            });

            this.AddPluginMenuItems(menu, Api.MenuType.Links);
        }

        /// <summary>
        /// Replaces MenuItems up until the first separator with dynamic MenuItems.
        /// The dynamic MenuItems are generated by the createMenuItem Func
        /// </summary>
        private static void UpdateMenu<T>(MenuItem menu, IList<T> dynamicItems, Func<T, Control> createMenuItem)
        {
            for (int i = 0; i < dynamicItems.Count; i++)
            {
                FrameworkElement item = (FrameworkElement)menu.Items[i];

                if (item.Tag is string str && str == "[End]")
                {
                    // Reached the end separator
                    menu.Items.Insert(i, createMenuItem(dynamicItems[i]));
                }
                else if (!(item.Tag is T itemTag) || !EqualityComparer<T>.Default.Equals(itemTag, dynamicItems[i]))
                {
                    FrameworkElement elem = createMenuItem(dynamicItems[i]);
                    elem.Tag = dynamicItems[i];
                    menu.Items[i] = elem;
                }
            }

            // Delete old extra items
            for (int i = dynamicItems.Count; i < menu.Items.Count; i++)
            {
                FrameworkElement item = (FrameworkElement)menu.Items[i];

                if (item.Tag is string str && str == "[End]")
                {
                    item.Visibility = (dynamicItems.Count > 0) ? Visibility.Visible : Visibility.Collapsed;
                    break;
                }
                else
                {
                    menu.Items.RemoveAt(i--);
                }
            }
        }

        private void AddPluginMenuItems(MenuItem menu, Api.MenuType menuType)
        {
            if (menu.Items.OfType<Separator>().Where(s => s.Tag is string name && name == "[Plugins]").FirstOrDefault() is Separator separator)
            {
                separator.Tag = null;
                int index = menu.Items.IndexOf(separator);

                foreach (Api.IMenuItemProvider provider in this.App.MenuItemProviders)
                {
                    try
                    {
                        foreach (MenuItem item in provider.GetMenuItems(menuType, this.ViewModel))
                        {
                            if (item != null)
                            {
                                menu.Items.Insert(index, item);
                            }
                        }
                    }
                    catch
                    {
                        Debug.Fail($"IMenuItemProvider.GetMenuItems failed in plugin class {provider.GetType().FullName}");
                    }
                }

                if (menu.Items.IndexOf(separator) == index)
                {
                    // No plugins added anything
                    separator.Visibility = Visibility.Collapsed;
                }
            }
        }

        private void OnActivated(object sender, EventArgs args)
        {
            this.App.NativeApp?.Activate();
        }

        private void OnDeactivated(object sender, EventArgs args)
        {
            this.App.NativeApp?.Deactivate();
        }

        private IntPtr WindowProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)
        {
            this.App.NativeApp?.MainWindowProc(hwnd, msg, wParam, lParam);
            return IntPtr.Zero;
        }

        private void OnLoaded(object sender, RoutedEventArgs args)
        {
            if (PresentationSource.FromVisual(this) is HwndSource source)
            {
                source.AddHook(this.WindowProc);
            }
        }

        private void OnUnloaded(object sender, RoutedEventArgs args)
        {
            if (PresentationSource.FromVisual(this) is HwndSource source)
            {
                source.RemoveHook(this.WindowProc);
            }
        }

        private async Task OnClosing()
        {
            this.App.OnWindowClosing(this);

            AppSnapshot snapshot = new AppSnapshot(this.ViewModel);
            await snapshot.Save(this.App);
        }

        private async void OnClosing(object sender, CancelEventArgs args)
        {
            if (!this.systemShuttingDown)
            {
                await this.OnClosing();
            }
        }

        /// <summary>
        /// Last chance to save snapshot before restart
        /// </summary>
        public void OnSystemShutdown()
        {
            if (!this.systemShuttingDown)
            {
                this.systemShuttingDown = true;
                this.OnClosing().Wait();
            }
        }

        protected override void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs args)
        {
            base.OnGotKeyboardFocus(args);

            if (args.NewFocus == this)
            {
                this.ViewModel.ActiveWorkspace?.Workspace?.Focus();
            }
        }

        public void OnAltLetter(int vk)
        {
            CommandHelpers.ShowMenuFromAltLetter(this.MainMenu, vk);
        }

        public void OnAlt()
        {
            if (!this.MainMenu.IsKeyboardFocusWithin)
            {
                CommandHelpers.FocusFirstMenuItem(this.MainMenu);
            }
        }
    }
}
